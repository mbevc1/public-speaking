https://github.com/terraform-aws-modules/terraform-aws-eks/issues/1286#issuecomment-919761401

kubectl patch deployment coredns \
      --namespace kube-system \
      --type=json -p='[{"op": "remove", "path": "/spec/template/metadata/annotations", "value": "eks.amazonaws.com/compute-type"}]' \
      --kubeconfig <(echo $KUBECTL_CONFIG | base64 --decode) &>/dev/null
echo {\"result\": \"coredns compute type patched\"}
--
#!/bin/bash
# This create script must return a json as an output. Therefore, we suspend the kubectl output and return a static json.
# See: https://registry.terraform.io/providers/scottwinkler/shell/latest/docs/resources/shell_script_resource
kubectl patch deployment coredns \
      --namespace kube-system \
      --type=merge \
      -p '{"spec": {"template": {"metadata": {"annotations": {"eks.amazonaws.com/compute-type": "ec2"}}}}}' \
      --kubeconfig <(echo $KUBECTL_CONFIG | base64 --decode) &>/dev/null
echo {\"result\": \"coredns compute type switched back to ec2\"}
--
# Provider configuration
provider "shell" {
  interpreter = ["/bin/bash", "-c"]
  sensitive_environment = {
    KUBECTL_CONFIG = base64encode(module.eks.kubeconfig)
  }
}

# Configures coredns to run on Fargate.
# Per default coredns runs with EC2.
# The Terraform eks module does not offer any inputs to set the compute type of coredns to Fargate.
# See: https://github.com/terraform-aws-modules/terraform-aws-eks/issues/1286
# Therefore, we are using the kubectl to patch coredns using the Kubernetes API.
resource "shell_script" "coredns_fargate_patch" {
  lifecycle_commands {
    create = file("${path.module}/scripts/patch_coredns_for_fargate.sh")
    delete = file("${path.module}/scripts/patch_coredns_for_ec2.sh")
  }

  # Wait for the EKS module to get provisioned completely including the kube-system Fargate profile.
  depends_on = [module.eks]
}
